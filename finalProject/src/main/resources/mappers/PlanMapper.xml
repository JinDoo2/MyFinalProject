<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="PlanMapper">
  	<select id="bigCity_list" resultType="com.plan.big.BigDTO">
  		select * from bigcity order by no asc
  	</select>
  	
  	<select id="gang_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='Gangwon' order by no asc
  	</select>
  	
  	<select id="gyeong_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='Gyeonggi' order by no asc
  	</select>
  	
  	<select id="gyeongsangS_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='GyeongsangSouth' order by no asc
  	</select>
  	
  	<select id="gyeongsangN_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='GyeongsangNorth' order by no asc
  	</select>
  	
  	<select id="chungcheongS_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='ChungcheongSouth' order by no asc
  	</select>
  	
  	<select id="chungcheongN_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='ChungcheongNorth' order by no asc
  	</select>
  	
  	<select id="jeollaS_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='JeollaSouth' order by no asc
  	</select>
  	
  	<select id="jeollaN_list" resultType="com.plan.city.CityDTO">
  		select * from city where big_ename='JeollaNorth' order by no asc
  	</select>
  	
  	
  	<!-- plan DB 중간넣기 -->
  	<insert id="plan_insert" parameterType="com.plan.plan.PlanDTO">
  		insert into plan values(plan_seq.nextval,#{id},null,#{s_date},#{f_date},0,null,0,0,#{days})
  	</insert>
  	
  	<!-- plan DB 임시저장, 중간저장으로 업데이트하기 -->
  	<update id="plan_save_update" parameterType="com.plan.plan.PlanDTO">
  		update plan set plan_name=#{plan_name}, s_date = #{s_date}, f_date = #{f_date}, thema = #{thema}, state=#{state}, season=#{season} where plan_no = #{plan_no}
  	</update>
  	
  	
  	<!-- plan DB No 가져오기 -->
  	<select id="get_plan_no" resultType="java.lang.Integer">
		  	select Max(plan_no) from plan
  	</select>
  	
  	<!-- dayPlan DB insert for문 -->
  	<insert id="dayPlan_insert" parameterType="com.plan.dayPlan.DayPlanDTO">
	  	
  		insert into dailyplan values(dailyplan_seq.nextval,#{plan_no},#{daily_date},#{city_no},#{daily_xlocation},#{daily_ylocation})
	  	
	 </insert>
	 
	 <!-- datPlanReDTO에 data넣어서 리스트로 받아오기 -->
	 <select id="get_dayPalnReDTO" resultType="com.plan.dayPlan.DayPlanReDTO" parameterType="com.plan.dayPlan.DayPlanDTO">
	 	select * from dailyplan join city on dailyplan.CITY_NO = city.NO where plan_no = #{plan_no} order by daily_date
	 </select>
	 
	 <!-- planDB에서 plan_no값인 값 하나 빼오기 -->
	 <select id="get_planDTOone" resultType="com.plan.plan.PlanDTO" parameterType="com.plan.plan.PlanDTO">
	 	select * from plan where plan_no=#{plan_no}
	 </select>
	 
	 <!-- spot List 가져오기 -->
	 <select id="get_pspotList" resultType="com.plan.spot.SpotDTO" parameterType="java.lang.Integer">
	 	select * from spot where city_no=#{city_no}
	 </select>
	 
	 <!-- daily date, daily week 업데이트 -->
	 <update id="get_daily_update" parameterType="com.plan.dayPlan.DayPlanDTO">
	 	update dailyplan set daily_date=#{daily_date} where plan_no=#{plan_no} and daily_no=#{daily_no}
	 </update>
	 
	 <!-- dailyspot DB에 저장시키기 -->
	 <insert id="daySpot_insert" parameterType="com.plan.daySpot.DaySpotDTO">
	 	insert into dailyspot values(dailyspot_seq.nextval,#{daily_no},#{spot_name},#{spot_xlocation},#{spot_ylocation},#{plan_no},#{spot_no})
	 </insert>
	 
	 <!-- member 정보 읽어오기 -->
	 <select id="writer_search" resultType="com.plan.member.MemberDTO" parameterType="java.lang.String">
	 	select * from member where id=#{id}
	 </select>
	 
	 <!-- plan_no로 일정 다 select해오기 -->
	 <select id="plan_search" resultType="com.plan.plan.PlanDTO" parameterType="java.lang.Integer">
	 	select * from plan where plan_no=#{plan_no}
	 </select>
	 <select id="daily_plan_search" resultType="com.plan.dayPlan.DayPlanReDTO" parameterType="java.lang.Integer">
	 	select * from dailyplan join city on dailyplan.CITY_NO = city.NO where plan_no = #{plan_no} order by daily_date
	 </select>
	 <select id="daily_spot_search" resultType="com.plan.daySpot.DaySpotReDTO" parameterType="java.util.HashMap">
	 	select * from dailyspot join spot on dailyspot.SPOT_NO = spot.NUM where plan_no = #{plan_no} and daily_no=#{daily_no} order by no
	 </select>
	 <!-- view했을때 counts +1 업데이트 -->
	 <update id="plan_view_counts_update" parameterType="java.lang.Integer">
	 	update plan set counts = counts+1 where plan_no=#{plan_no}
	 </update>
	 
	 <!-- plan 댓글 달기 -->
	 <insert id="plan_reply_write" parameterType="com.plan.planRe.PlanReDTO">
	 	insert into plan_review values(plan_review_seq.nextval,#{id},#{p_no},#{contents},sysdate)
	 </insert>
	 <!-- plan 댓글 쓰고 바로 최고 번호 가져오기 -->
	 <select id="plan_reply_maxNo" resultType="java.lang.Integer" parameterType="com.plan.planRe.PlanReDTO">
	 	select max(no) from plan_review where plan_no=#{p_no} and id=#{id}
	 </select>
	 <!-- 최고번호로 최신글 가져오기 -->
	 <select id="plan_reply_write_result" parameterType="java.lang.Integer" resultType="com.plan.planRe.PlanReDTO">
	 	select * from plan_review where no = #{no}
	 </select>
	 
	 <!-- plan reply list 읽어오기 -->
	 <select id="plan_reply_list" resultType="com.plan.planRe.PlanReDTO" parameterType="java.lang.Integer">
	 	select * from plan_review join member on plan_review.id=member.id where plan_no = #{plan_no} order by reg_date
	 </select>
	 
	 <!-- plan reply 삭제 -->
	 <delete id="plan_reply_del" parameterType="com.plan.planRe.PlanReDTO">
	 	delete plan_review where no=#{no} and plan_no=#{p_no} and id=#{id}
	 </delete>
	 
	 
	 <!-- city add할때 plan f_date업데이트하기 -->
	 <update id="plan_fdate_update" parameterType="com.plan.plan.PlanDTO">
	 	update plan set f_date=#{f_date}, days=#{days} where plan_no=#{plan_no}
	 </update>
	 
	 
	 <!-- day_plan delete하기 -->
	 <delete id="day_plan_del" parameterType="com.plan.dayPlan.DayPlanReDTO">
	 	delete dailyplan where plan_no=#{plan_no} and daily_no = #{daily_no}
	 </delete>
	 <!-- day_spot delete하기 -->
	 <delete id="day_spot_del" parameterType="com.plan.planRe.PlanReDTO">
	 	delete dailyspot where plan_no=#{plan_no} and daily_no = #{daily_no}
	 </delete>
	 <!-- day_spot delete하기 -->
	 <delete id="day_spot_del2" parameterType="com.plan.plan.PlanDTO">
	 	delete dailyspot where plan_no=#{plan_no}
	 </delete>
	 
	 <!-- 기본 신규순으로 plan_list 불러오기 -->
	 <select id="plan_list_select" resultType="com.plan.plan.NewPlanDTO" parameterType="com.plan.plan.PlanMakePage">
	 	select * from (select rownum r, a.* from (select * from plan where state=2 order by s_date desc) a) where r between #{startRow} and #{lastRow}
	 </select>
	 
	 <!-- plan_list 총갯수 세기 -->
	 <select id="plan_list_counts" resultType="java.lang.Integer">
	 	select count(*)  from plan where state=2
	 </select>
	 
	 <!-- spot 갯수 중복 제거하여 보여주기 -->
	 <select id="spot_counts" parameterType="com.plan.plan.PlanDTO" resultType="java.lang.Integer">
	 	select count(*) from (select distinct spot_no from dailyspot where plan_no=#{plan_no}) 
	 </select>
	 
	 <!-- 클립 갯수 보여주기 -->
  	 <select id="clip_counts" parameterType="com.plan.plan.PlanDTO" resultType="java.lang.Integer">
  	 	select count(*) from jim where plan_no = #{plan_no}
  	 </select>
  
  	<!-- 일정에잡힌 city_name들 나열해주기 -->
  	<select id="get_city_names" parameterType="com.plan.plan.PlanDTO" resultType="java.lang.String">
  		select city_name from (select distinct city_no, city_name from dailyplan join city on dailyplan.CITY_NO = city.NO where plan_no=#{plan_no})
  	</select>
  
  	<!-- city_list 전체 뽑아오기 -->
  	<select id="city_list_all" resultType="com.plan.city.CityDTO">
  		select city.*, bigcity.BIG_NAME , bigcity.NO as big_no from bigcity join city on bigcity.BIG_ENAME = city.BIG_ENAME order by bigcity.no
  	</select> 
  	
  	<!-- plan_list ajax로 조건으로 뽑기 -->
  <select id="plan_list_ajax" parameterType="com.plan.plan.NewPlanDTO" resultType="com.plan.plan.NewPlanDTO">
  		select distinct plan.* from plan join dailyplan on plan.PLAN_NO = dailyplan.PLAN_NO where state=2
  		<if test="city_no != 0">
  			and city_no=#{city_no}
  		</if>
  		<if test="season != ''.toString()">
  			and season=#{season}
  		</if>
  		<if test="thema != 0">
  			and thema=#{thema}
  		</if>
  		<if test="days != 0">
  			<choose>
  				<when test="days == 3">
  					and days between #{days}-2 and #{days}
  				</when>
  				<when test="days == 6">
  					and days between #{days}-2 and #{days}
  				</when>
  				<when test="days == 6">
  					and days between #{days}-2 and #{days}
  				</when>
  				<otherwise>
  					and days > #{days}
  				</otherwise>
  			</choose>
  		</if>
  		order by s_date desc
  	</select>
   
  	<!-- plan_jim 하기 -->
  	<insert id="plan_jim_insert" parameterType="com.plan.scrap.ScrapDTO">
  		insert into jim(no,id,plan_no) values(jim_seq.nextval,#{id},#{plan_no})
  	</insert>
  	<!-- plan_jim 취소하기 -->
  	<delete id="plan_jim_delete" parameterType="com.plan.scrap.ScrapDTO">
  		delete jim where id=#{id} and plan_no=#{plan_no}
  	</delete>
  	<!-- plan_jim 검색-->
  	<select id="plan_jim_select" parameterType="com.plan.scrap.ScrapDTO" resultType="com.plan.scrap.ScrapDTO">
  		select * from jim where id=#{id} and plan_no=#{plan_no}
  	</select>
  	
  	<!-- Mypage 완성 -->
  	<select id="select_complite_plan" resultType="com.plan.plan.NewPlanDTO" parameterType="com.plan.plan.NewPlanDTO">
  		select * from plan where id=#{id} and state=2 order by plan_no
  	</select>
  	<!-- Mypage 미완성 -->
  	<select id="select_incomplite_plan" resultType="com.plan.plan.NewPlanDTO" parameterType="com.plan.plan.NewPlanDTO">
  		select * from plan where id=#{id} and state=1 order by plan_no
  	</select>
  	
  	<!-- 자신의 일정 지우기 -->
  	<delete id="del_my_plan" parameterType="com.plan.plan.PlanDTO">
  		delete plan where id=#{id} and plan_no=#{plan_no}
  	</delete>
  </mapper>